// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/go-park-mail-ru/2022_2_TikTikIVProd/ChatMicroservice/models"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryI is an autogenerated mock type for the RepositoryI type
type RepositoryI struct {
	mock.Mock
}

// CreateDialog provides a mock function with given fields: dialog
func (_m *RepositoryI) CreateDialog(dialog *models.Dialog) error {
	ret := _m.Called(dialog)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Dialog) error); ok {
		r0 = rf(dialog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMessage provides a mock function with given fields: message
func (_m *RepositoryI) CreateMessage(message *models.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllDialogs provides a mock function with given fields: userId
func (_m *RepositoryI) SelectAllDialogs(userId uint64) ([]models.Dialog, error) {
	ret := _m.Called(userId)

	var r0 []models.Dialog
	if rf, ok := ret.Get(0).(func(uint64) []models.Dialog); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDialog provides a mock function with given fields: id
func (_m *RepositoryI) SelectDialog(id uint64) (*models.Dialog, error) {
	ret := _m.Called(id)

	var r0 *models.Dialog
	if rf, ok := ret.Get(0).(func(uint64) *models.Dialog); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDialogByUsers provides a mock function with given fields: userId, friendId
func (_m *RepositoryI) SelectDialogByUsers(userId uint64, friendId uint64) (*models.Dialog, error) {
	ret := _m.Called(userId, friendId)

	var r0 *models.Dialog
	if rf, ok := ret.Get(0).(func(uint64, uint64) *models.Dialog); ok {
		r0 = rf(userId, friendId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userId, friendId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMessages provides a mock function with given fields: id
func (_m *RepositoryI) SelectMessages(id uint64) ([]models.Message, error) {
	ret := _m.Called(id)

	var r0 []models.Message
	if rf, ok := ret.Get(0).(func(uint64) []models.Message); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryI interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryI creates a new instance of RepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryI(t mockConstructorTestingTNewRepositoryI) *RepositoryI {
	mock := &RepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
