// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: chat.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	SelectDialog(ctx context.Context, in *DialogId, opts ...grpc.CallOption) (*Dialog, error)
	SelectDialogByUsers(ctx context.Context, in *SelectDialogByUsersRequest, opts ...grpc.CallOption) (*Dialog, error)
	SelectMessages(ctx context.Context, in *DialogId, opts ...grpc.CallOption) (*SelectMessagesResponse, error)
	CreateDialog(ctx context.Context, in *Dialog, opts ...grpc.CallOption) (*DialogId, error)
	CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Nothing, error)
	SelectAllDialogs(ctx context.Context, in *SelectAllDialogsRequest, opts ...grpc.CallOption) (*SelectAllDialogsResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) SelectDialog(ctx context.Context, in *DialogId, opts ...grpc.CallOption) (*Dialog, error) {
	out := new(Dialog)
	err := c.cc.Invoke(ctx, "/chat.Chat/SelectDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SelectDialogByUsers(ctx context.Context, in *SelectDialogByUsersRequest, opts ...grpc.CallOption) (*Dialog, error) {
	out := new(Dialog)
	err := c.cc.Invoke(ctx, "/chat.Chat/SelectDialogByUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SelectMessages(ctx context.Context, in *DialogId, opts ...grpc.CallOption) (*SelectMessagesResponse, error) {
	out := new(SelectMessagesResponse)
	err := c.cc.Invoke(ctx, "/chat.Chat/SelectMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateDialog(ctx context.Context, in *Dialog, opts ...grpc.CallOption) (*DialogId, error) {
	out := new(DialogId)
	err := c.cc.Invoke(ctx, "/chat.Chat/CreateDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/chat.Chat/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SelectAllDialogs(ctx context.Context, in *SelectAllDialogsRequest, opts ...grpc.CallOption) (*SelectAllDialogsResponse, error) {
	out := new(SelectAllDialogsResponse)
	err := c.cc.Invoke(ctx, "/chat.Chat/SelectAllDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	SelectDialog(context.Context, *DialogId) (*Dialog, error)
	SelectDialogByUsers(context.Context, *SelectDialogByUsersRequest) (*Dialog, error)
	SelectMessages(context.Context, *DialogId) (*SelectMessagesResponse, error)
	CreateDialog(context.Context, *Dialog) (*DialogId, error)
	CreateMessage(context.Context, *Message) (*Nothing, error)
	SelectAllDialogs(context.Context, *SelectAllDialogsRequest) (*SelectAllDialogsResponse, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) SelectDialog(context.Context, *DialogId) (*Dialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDialog not implemented")
}
func (UnimplementedChatServer) SelectDialogByUsers(context.Context, *SelectDialogByUsersRequest) (*Dialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDialogByUsers not implemented")
}
func (UnimplementedChatServer) SelectMessages(context.Context, *DialogId) (*SelectMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectMessages not implemented")
}
func (UnimplementedChatServer) CreateDialog(context.Context, *Dialog) (*DialogId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDialog not implemented")
}
func (UnimplementedChatServer) CreateMessage(context.Context, *Message) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedChatServer) SelectAllDialogs(context.Context, *SelectAllDialogsRequest) (*SelectAllDialogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllDialogs not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_SelectDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SelectDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/SelectDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SelectDialog(ctx, req.(*DialogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SelectDialogByUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDialogByUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SelectDialogByUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/SelectDialogByUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SelectDialogByUsers(ctx, req.(*SelectDialogByUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SelectMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SelectMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/SelectMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SelectMessages(ctx, req.(*DialogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/CreateDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateDialog(ctx, req.(*Dialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SelectAllDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllDialogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SelectAllDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/SelectAllDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SelectAllDialogs(ctx, req.(*SelectAllDialogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectDialog",
			Handler:    _Chat_SelectDialog_Handler,
		},
		{
			MethodName: "SelectDialogByUsers",
			Handler:    _Chat_SelectDialogByUsers_Handler,
		},
		{
			MethodName: "SelectMessages",
			Handler:    _Chat_SelectMessages_Handler,
		},
		{
			MethodName: "CreateDialog",
			Handler:    _Chat_CreateDialog_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Chat_CreateMessage_Handler,
		},
		{
			MethodName: "SelectAllDialogs",
			Handler:    _Chat_SelectAllDialogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
