// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "get": {
                "description": "check user auth",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Auth",
                "responses": {
                    "200": {
                        "description": "success auth",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "401": {
                        "description": "no cookie",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "405": {
                        "description": "invalid http method",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "user logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "success logout"
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "401": {
                        "description": "no cookie",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "405": {
                        "description": "invalid http method",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    }
                }
            }
        },
        "/signin": {
            "post": {
                "description": "user sign in",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "SignIn",
                "parameters": [
                    {
                        "description": "user info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserSignIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success sign in",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "401": {
                        "description": "invalid password",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "404": {
                        "description": "user doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "405": {
                        "description": "invalid http method",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "user sign up",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "SignUp",
                "parameters": [
                    {
                        "description": "user info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user created",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "405": {
                        "description": "invalid http method",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "409": {
                        "description": "user with this email already exists",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/pkg.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "nick_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.UserSignIn": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "pkg.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "89.208.197.127:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "WS Swagger API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
