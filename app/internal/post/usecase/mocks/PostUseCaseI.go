// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/go-park-mail-ru/2022_2_TikTikIVProd/models"
	mock "github.com/stretchr/testify/mock"
)

// PostUseCaseI is an autogenerated mock type for the PostUseCaseI type
type PostUseCaseI struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: p
func (_m *PostUseCaseI) CreatePost(p *models.Post) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Post) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePost provides a mock function with given fields: id, userId
func (_m *PostUseCaseI) DeletePost(id int, userId int) error {
	ret := _m.Called(id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPosts provides a mock function with given fields:
func (_m *PostUseCaseI) GetAllPosts() ([]*models.Post, error) {
	ret := _m.Called()

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func() []*models.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostById provides a mock function with given fields: id
func (_m *PostUseCaseI) GetPostById(id int) (*models.Post, error) {
	ret := _m.Called(id)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(int) *models.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPosts provides a mock function with given fields: userId
func (_m *PostUseCaseI) GetUserPosts(userId int) ([]*models.Post, error) {
	ret := _m.Called(userId)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(int) []*models.Post); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: p
func (_m *PostUseCaseI) UpdatePost(p *models.Post) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Post) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPostUseCaseI interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostUseCaseI creates a new instance of PostUseCaseI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostUseCaseI(t mockConstructorTestingTNewPostUseCaseI) *PostUseCaseI {
	mock := &PostUseCaseI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
