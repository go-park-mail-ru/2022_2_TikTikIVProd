// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	model "github.com/go-park-mail-ru/2022_2_TikTikIVProd/internal/user/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCaseI is a mock of UseCaseI interface.
type MockUseCaseI struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseIMockRecorder
}

// MockUseCaseIMockRecorder is the mock recorder for MockUseCaseI.
type MockUseCaseIMockRecorder struct {
	mock *MockUseCaseI
}

// NewMockUseCaseI creates a new mock instance.
func NewMockUseCaseI(ctrl *gomock.Controller) *MockUseCaseI {
	mock := &MockUseCaseI{ctrl: ctrl}
	mock.recorder = &MockUseCaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseI) EXPECT() *MockUseCaseIMockRecorder {
	return m.recorder
}

// CreateCookie mocks base method.
func (m *MockUseCaseI) CreateCookie(userId int) (*model.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCookie", userId)
	ret0, _ := ret[0].(*model.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCookie indicates an expected call of CreateCookie.
func (mr *MockUseCaseIMockRecorder) CreateCookie(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCookie", reflect.TypeOf((*MockUseCaseI)(nil).CreateCookie), userId)
}

// CreateUser mocks base method.
func (m *MockUseCaseI) CreateUser(user model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUseCaseIMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUseCaseI)(nil).CreateUser), user)
}

// DeleteCookie mocks base method.
func (m *MockUseCaseI) DeleteCookie(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockUseCaseIMockRecorder) DeleteCookie(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockUseCaseI)(nil).DeleteCookie), value)
}

// SelectCookie mocks base method.
func (m *MockUseCaseI) SelectCookie(value string) (*model.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCookie", value)
	ret0, _ := ret[0].(*model.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCookie indicates an expected call of SelectCookie.
func (mr *MockUseCaseIMockRecorder) SelectCookie(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCookie", reflect.TypeOf((*MockUseCaseI)(nil).SelectCookie), value)
}

// SelectUserByEmail mocks base method.
func (m *MockUseCaseI) SelectUserByEmail(email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByEmail indicates an expected call of SelectUserByEmail.
func (mr *MockUseCaseIMockRecorder) SelectUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByEmail", reflect.TypeOf((*MockUseCaseI)(nil).SelectUserByEmail), email)
}

// SelectUserById mocks base method.
func (m *MockUseCaseI) SelectUserById(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserById", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserById indicates an expected call of SelectUserById.
func (mr *MockUseCaseIMockRecorder) SelectUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserById", reflect.TypeOf((*MockUseCaseI)(nil).SelectUserById), id)
}

// SelectUserByNickName mocks base method.
func (m *MockUseCaseI) SelectUserByNickName(nickname string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByNickName", nickname)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByNickName indicates an expected call of SelectUserByNickName.
func (mr *MockUseCaseIMockRecorder) SelectUserByNickName(nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByNickName", reflect.TypeOf((*MockUseCaseI)(nil).SelectUserByNickName), nickname)
}

// SignIn mocks base method.
func (m *MockUseCaseI) SignIn(user model.UserSignIn) (*model.User, *model.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Cookie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUseCaseIMockRecorder) SignIn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUseCaseI)(nil).SignIn), user)
}

// SignUp mocks base method.
func (m *MockUseCaseI) SignUp(user model.User) (*model.User, *model.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.Cookie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUseCaseIMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUseCaseI)(nil).SignUp), user)
}
