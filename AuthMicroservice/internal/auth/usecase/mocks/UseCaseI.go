// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	__ "github.com/go-park-mail-ru/2022_2_TikTikIVProd/AuthMicroservice/proto"
	mock "github.com/stretchr/testify/mock"
)

// UseCaseI is an autogenerated mock type for the UseCaseI type
type UseCaseI struct {
	mock.Mock
}

// CreateCookie provides a mock function with given fields: _a0
func (_m *UseCaseI) CreateCookie(_a0 *__.Cookie) (*__.Nothing, error) {
	ret := _m.Called(_a0)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(*__.Cookie) *__.Nothing); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*__.Cookie) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCookie provides a mock function with given fields: _a0
func (_m *UseCaseI) DeleteCookie(_a0 *__.ValueCookieRequest) (*__.Nothing, error) {
	ret := _m.Called(_a0)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(*__.ValueCookieRequest) *__.Nothing); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*__.ValueCookieRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCookie provides a mock function with given fields: _a0
func (_m *UseCaseI) GetCookie(_a0 *__.ValueCookieRequest) (*__.GetCookieResponse, error) {
	ret := _m.Called(_a0)

	var r0 *__.GetCookieResponse
	if rf, ok := ret.Get(0).(func(*__.ValueCookieRequest) *__.GetCookieResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.GetCookieResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*__.ValueCookieRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCaseI interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseI creates a new instance of UseCaseI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseI(t mockConstructorTestingTNewUseCaseI) *UseCaseI {
	mock := &UseCaseI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
