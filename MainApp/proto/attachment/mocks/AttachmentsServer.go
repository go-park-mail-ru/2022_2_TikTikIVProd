// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	__ "github.com/go-park-mail-ru/2022_2_TikTikIVProd/MainApp/proto/attachment"

	mock "github.com/stretchr/testify/mock"
)

// AttachmentsServer is an autogenerated mock type for the AttachmentsServer type
type AttachmentsServer struct {
	mock.Mock
}

// CreateAttachment provides a mock function with given fields: _a0, _a1
func (_m *AttachmentsServer) CreateAttachment(_a0 context.Context, _a1 *__.Attachment) (*__.AttachmentId, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.AttachmentId
	if rf, ok := ret.Get(0).(func(context.Context, *__.Attachment) *__.AttachmentId); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.AttachmentId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Attachment) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachment provides a mock function with given fields: _a0, _a1
func (_m *AttachmentsServer) GetAttachment(_a0 context.Context, _a1 *__.AttachmentId) (*__.Attachment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.Attachment
	if rf, ok := ret.Get(0).(func(context.Context, *__.AttachmentId) *__.Attachment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Attachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.AttachmentId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageAttachments provides a mock function with given fields: _a0, _a1
func (_m *AttachmentsServer) GetMessageAttachments(_a0 context.Context, _a1 *__.GetMessageAttachmentsRequest) (*__.GetMessageAttachmentsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.GetMessageAttachmentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.GetMessageAttachmentsRequest) *__.GetMessageAttachmentsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.GetMessageAttachmentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.GetMessageAttachmentsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostAttachments provides a mock function with given fields: _a0, _a1
func (_m *AttachmentsServer) GetPostAttachments(_a0 context.Context, _a1 *__.GetPostAttachmentsRequest) (*__.GetPostAttachmentsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.GetPostAttachmentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.GetPostAttachmentsRequest) *__.GetPostAttachmentsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.GetPostAttachmentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.GetPostAttachmentsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAttachmentsServer provides a mock function with given fields:
func (_m *AttachmentsServer) mustEmbedUnimplementedAttachmentsServer() {
	_m.Called()
}

type mockConstructorTestingTNewAttachmentsServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttachmentsServer creates a new instance of AttachmentsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttachmentsServer(t mockConstructorTestingTNewAttachmentsServer) *AttachmentsServer {
	mock := &AttachmentsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
