// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	__ "github.com/go-park-mail-ru/2022_2_TikTikIVProd/MainApp/proto/user"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// UsersClient is an autogenerated mock type for the UsersClient type
type UsersClient struct {
	mock.Mock
}

// AddFriend provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) AddFriend(ctx context.Context, in *__.Friends, opts ...grpc.CallOption) (*__.Nothing, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.Friends, ...grpc.CallOption) *__.Nothing); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Friends, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckFriends provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) CheckFriends(ctx context.Context, in *__.Friends, opts ...grpc.CallOption) (*__.CheckFriendsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.CheckFriendsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.Friends, ...grpc.CallOption) *__.CheckFriendsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.CheckFriendsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Friends, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) CreateUser(ctx context.Context, in *__.User, opts ...grpc.CallOption) (*__.UserId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.UserId
	if rf, ok := ret.Get(0).(func(context.Context, *__.User, ...grpc.CallOption) *__.UserId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UserId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.User, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFriend provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) DeleteFriend(ctx context.Context, in *__.Friends, opts ...grpc.CallOption) (*__.Nothing, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.Friends, ...grpc.CallOption) *__.Nothing); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Friends, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) SearchUsers(ctx context.Context, in *__.SearchUsersRequest, opts ...grpc.CallOption) (*__.UsersList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.UsersList
	if rf, ok := ret.Get(0).(func(context.Context, *__.SearchUsersRequest, ...grpc.CallOption) *__.UsersList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UsersList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SearchUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllUsers provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) SelectAllUsers(ctx context.Context, in *__.Nothing, opts ...grpc.CallOption) (*__.UsersList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.UsersList
	if rf, ok := ret.Get(0).(func(context.Context, *__.Nothing, ...grpc.CallOption) *__.UsersList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UsersList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Nothing, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFriends provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) SelectFriends(ctx context.Context, in *__.UserId, opts ...grpc.CallOption) (*__.UsersList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.UsersList
	if rf, ok := ret.Get(0).(func(context.Context, *__.UserId, ...grpc.CallOption) *__.UsersList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UsersList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.UserId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserByEmail provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) SelectUserByEmail(ctx context.Context, in *__.SelectUserByEmailRequest, opts ...grpc.CallOption) (*__.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.User
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectUserByEmailRequest, ...grpc.CallOption) *__.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectUserByEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserById provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) SelectUserById(ctx context.Context, in *__.UserId, opts ...grpc.CallOption) (*__.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.User
	if rf, ok := ret.Get(0).(func(context.Context, *__.UserId, ...grpc.CallOption) *__.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.UserId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserByNickName provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) SelectUserByNickName(ctx context.Context, in *__.SelectUserByNickNameRequest, opts ...grpc.CallOption) (*__.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.User
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectUserByNickNameRequest, ...grpc.CallOption) *__.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectUserByNickNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) UpdateUser(ctx context.Context, in *__.User, opts ...grpc.CallOption) (*__.Nothing, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.User, ...grpc.CallOption) *__.Nothing); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.User, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsersClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersClient creates a new instance of UsersClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersClient(t mockConstructorTestingTNewUsersClient) *UsersClient {
	mock := &UsersClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
