// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	__ "github.com/go-park-mail-ru/2022_2_TikTikIVProd/MainApp/proto/user"

	mock "github.com/stretchr/testify/mock"
)

// UsersServer is an autogenerated mock type for the UsersServer type
type UsersServer struct {
	mock.Mock
}

// AddFriend provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) AddFriend(_a0 context.Context, _a1 *__.Friends) (*__.Nothing, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.Friends) *__.Nothing); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Friends) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckFriends provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) CheckFriends(_a0 context.Context, _a1 *__.Friends) (*__.CheckFriendsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.CheckFriendsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.Friends) *__.CheckFriendsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.CheckFriendsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Friends) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) CreateUser(_a0 context.Context, _a1 *__.User) (*__.UserId, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.UserId
	if rf, ok := ret.Get(0).(func(context.Context, *__.User) *__.UserId); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UserId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFriend provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) DeleteFriend(_a0 context.Context, _a1 *__.Friends) (*__.Nothing, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.Friends) *__.Nothing); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Friends) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) SearchUsers(_a0 context.Context, _a1 *__.SearchUsersRequest) (*__.UsersList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.UsersList
	if rf, ok := ret.Get(0).(func(context.Context, *__.SearchUsersRequest) *__.UsersList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UsersList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SearchUsersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllUsers provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) SelectAllUsers(_a0 context.Context, _a1 *__.Nothing) (*__.UsersList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.UsersList
	if rf, ok := ret.Get(0).(func(context.Context, *__.Nothing) *__.UsersList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UsersList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Nothing) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFriends provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) SelectFriends(_a0 context.Context, _a1 *__.UserId) (*__.UsersList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.UsersList
	if rf, ok := ret.Get(0).(func(context.Context, *__.UserId) *__.UsersList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.UsersList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.UserId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserByEmail provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) SelectUserByEmail(_a0 context.Context, _a1 *__.SelectUserByEmailRequest) (*__.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.User
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectUserByEmailRequest) *__.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectUserByEmailRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserById provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) SelectUserById(_a0 context.Context, _a1 *__.UserId) (*__.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.User
	if rf, ok := ret.Get(0).(func(context.Context, *__.UserId) *__.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.UserId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserByNickName provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) SelectUserByNickName(_a0 context.Context, _a1 *__.SelectUserByNickNameRequest) (*__.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.User
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectUserByNickNameRequest) *__.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectUserByNickNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UsersServer) UpdateUser(_a0 context.Context, _a1 *__.User) (*__.Nothing, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.User) *__.Nothing); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUsersServer provides a mock function with given fields:
func (_m *UsersServer) mustEmbedUnimplementedUsersServer() {
	_m.Called()
}

type mockConstructorTestingTNewUsersServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersServer creates a new instance of UsersServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersServer(t mockConstructorTestingTNewUsersServer) *UsersServer {
	mock := &UsersServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
