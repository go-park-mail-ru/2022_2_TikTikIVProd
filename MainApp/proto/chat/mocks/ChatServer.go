// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	__ "github.com/go-park-mail-ru/2022_2_TikTikIVProd/MainApp/proto/chat"

	mock "github.com/stretchr/testify/mock"
)

// ChatServer is an autogenerated mock type for the ChatServer type
type ChatServer struct {
	mock.Mock
}

// CreateDialog provides a mock function with given fields: _a0, _a1
func (_m *ChatServer) CreateDialog(_a0 context.Context, _a1 *__.Dialog) (*__.DialogId, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.DialogId
	if rf, ok := ret.Get(0).(func(context.Context, *__.Dialog) *__.DialogId); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.DialogId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Dialog) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMessage provides a mock function with given fields: _a0, _a1
func (_m *ChatServer) CreateMessage(_a0 context.Context, _a1 *__.Message) (*__.Nothing, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.Message) *__.Nothing); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Message) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllDialogs provides a mock function with given fields: _a0, _a1
func (_m *ChatServer) SelectAllDialogs(_a0 context.Context, _a1 *__.SelectAllDialogsRequest) (*__.SelectAllDialogsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.SelectAllDialogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectAllDialogsRequest) *__.SelectAllDialogsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.SelectAllDialogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectAllDialogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDialog provides a mock function with given fields: _a0, _a1
func (_m *ChatServer) SelectDialog(_a0 context.Context, _a1 *__.DialogId) (*__.Dialog, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.Dialog
	if rf, ok := ret.Get(0).(func(context.Context, *__.DialogId) *__.Dialog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.DialogId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDialogByUsers provides a mock function with given fields: _a0, _a1
func (_m *ChatServer) SelectDialogByUsers(_a0 context.Context, _a1 *__.SelectDialogByUsersRequest) (*__.Dialog, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.Dialog
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectDialogByUsersRequest) *__.Dialog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectDialogByUsersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMessages provides a mock function with given fields: _a0, _a1
func (_m *ChatServer) SelectMessages(_a0 context.Context, _a1 *__.DialogId) (*__.SelectMessagesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *__.SelectMessagesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.DialogId) *__.SelectMessagesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.SelectMessagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.DialogId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedChatServer provides a mock function with given fields:
func (_m *ChatServer) mustEmbedUnimplementedChatServer() {
	_m.Called()
}

type mockConstructorTestingTNewChatServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatServer creates a new instance of ChatServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatServer(t mockConstructorTestingTNewChatServer) *ChatServer {
	mock := &ChatServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
