// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	__ "github.com/go-park-mail-ru/2022_2_TikTikIVProd/MainApp/proto/chat"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ChatClient is an autogenerated mock type for the ChatClient type
type ChatClient struct {
	mock.Mock
}

// CreateDialog provides a mock function with given fields: ctx, in, opts
func (_m *ChatClient) CreateDialog(ctx context.Context, in *__.Dialog, opts ...grpc.CallOption) (*__.DialogId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.DialogId
	if rf, ok := ret.Get(0).(func(context.Context, *__.Dialog, ...grpc.CallOption) *__.DialogId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.DialogId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Dialog, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMessage provides a mock function with given fields: ctx, in, opts
func (_m *ChatClient) CreateMessage(ctx context.Context, in *__.Message, opts ...grpc.CallOption) (*__.Nothing, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *__.Message, ...grpc.CallOption) *__.Nothing); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.Message, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllDialogs provides a mock function with given fields: ctx, in, opts
func (_m *ChatClient) SelectAllDialogs(ctx context.Context, in *__.SelectAllDialogsRequest, opts ...grpc.CallOption) (*__.SelectAllDialogsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.SelectAllDialogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectAllDialogsRequest, ...grpc.CallOption) *__.SelectAllDialogsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.SelectAllDialogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectAllDialogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDialog provides a mock function with given fields: ctx, in, opts
func (_m *ChatClient) SelectDialog(ctx context.Context, in *__.DialogId, opts ...grpc.CallOption) (*__.Dialog, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.Dialog
	if rf, ok := ret.Get(0).(func(context.Context, *__.DialogId, ...grpc.CallOption) *__.Dialog); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.DialogId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDialogByUsers provides a mock function with given fields: ctx, in, opts
func (_m *ChatClient) SelectDialogByUsers(ctx context.Context, in *__.SelectDialogByUsersRequest, opts ...grpc.CallOption) (*__.Dialog, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.Dialog
	if rf, ok := ret.Get(0).(func(context.Context, *__.SelectDialogByUsersRequest, ...grpc.CallOption) *__.Dialog); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.SelectDialogByUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMessages provides a mock function with given fields: ctx, in, opts
func (_m *ChatClient) SelectMessages(ctx context.Context, in *__.DialogId, opts ...grpc.CallOption) (*__.SelectMessagesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *__.SelectMessagesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *__.DialogId, ...grpc.CallOption) *__.SelectMessagesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.SelectMessagesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *__.DialogId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChatClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatClient creates a new instance of ChatClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatClient(t mockConstructorTestingTNewChatClient) *ChatClient {
	mock := &ChatClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
