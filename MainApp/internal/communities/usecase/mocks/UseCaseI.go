// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/go-park-mail-ru/2022_2_TikTikIVProd/MainApp/models"
	mock "github.com/stretchr/testify/mock"
)

// UseCaseI is an autogenerated mock type for the UseCaseI type
type UseCaseI struct {
	mock.Mock
}

// CreateCommunity provides a mock function with given fields: p
func (_m *UseCaseI) CreateCommunity(p *models.Community) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Community) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommunity provides a mock function with given fields: id, userId
func (_m *UseCaseI) DeleteCommunity(id uint64, userId uint64) error {
	ret := _m.Called(id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCommunities provides a mock function with given fields:
func (_m *UseCaseI) GetAllCommunities() ([]*models.Community, error) {
	ret := _m.Called()

	var r0 []*models.Community
	if rf, ok := ret.Get(0).(func() []*models.Community); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Community)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunity provides a mock function with given fields: id
func (_m *UseCaseI) GetCommunity(id uint64) (*models.Community, error) {
	ret := _m.Called(id)

	var r0 *models.Community
	if rf, ok := ret.Get(0).(func(uint64) *models.Community); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Community)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCommunities provides a mock function with given fields: searchString
func (_m *UseCaseI) SearchCommunities(searchString string) ([]*models.Community, error) {
	ret := _m.Called(searchString)

	var r0 []*models.Community
	if rf, ok := ret.Get(0).(func(string) []*models.Community); ok {
		r0 = rf(searchString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Community)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(searchString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommunity provides a mock function with given fields: p
func (_m *UseCaseI) UpdateCommunity(p *models.Community) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Community) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCaseI interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseI creates a new instance of UseCaseI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseI(t mockConstructorTestingTNewUseCaseI) *UseCaseI {
	mock := &UseCaseI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
