// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "count_likes":
			out.CountLikes = uint64(in.Uint64())
		case "is_liked":
			out.IsLiked = bool(in.Bool())
		case "community_id":
			out.CommunityID = uint64(in.Uint64())
		case "avatar_id":
			out.AvatarID = uint64(in.Uint64())
		case "user_first_name":
			out.UserFirstName = string(in.String())
		case "user_last_name":
			out.UserLastName = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "create_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateDate).UnmarshalJSON(data))
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]Image, 0, 2)
					} else {
						out.Images = []Image{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Image
					easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels1(in, &v1)
					out.Images = append(out.Images, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"count_likes\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CountLikes))
	}
	{
		const prefix string = ",\"is_liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	if in.CommunityID != 0 {
		const prefix string = ",\"community_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CommunityID))
	}
	{
		const prefix string = ",\"avatar_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AvatarID))
	}
	{
		const prefix string = ",\"user_first_name\":"
		out.RawString(prefix)
		out.String(string(in.UserFirstName))
	}
	{
		const prefix string = ",\"user_last_name\":"
		out.RawString(prefix)
		out.String(string(in.UserLastName))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"create_date\":"
		out.RawString(prefix)
		out.Raw((in.CreateDate).MarshalJSON())
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Images {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels(l, v)
}
func easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels1(in *jlexer.Lexer, out *Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels1(out *jwriter.Writer, in Image) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels2(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "avatar_id":
			out.AvatarID = uint64(in.Uint64())
		case "user_first_name":
			out.UserFirstName = string(in.String())
		case "user_last_name":
			out.UserLastName = string(in.String())
		case "post_id":
			out.PostID = uint64(in.Uint64())
		case "message":
			out.Message = string(in.String())
		case "create_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels2(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"avatar_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AvatarID))
	}
	{
		const prefix string = ",\"user_first_name\":"
		out.RawString(prefix)
		out.String(string(in.UserFirstName))
	}
	{
		const prefix string = ",\"user_last_name\":"
		out.RawString(prefix)
		out.String(string(in.UserLastName))
	}
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PostID))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"create_date\":"
		out.RawString(prefix)
		out.Raw((in.CreateDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComGoParkMailRu20222TikTikIVProdMainAppModels2(l, v)
}
